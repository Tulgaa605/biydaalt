generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  companyId String
  company   TravelCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)
  images    Image []
  userId    String @db.ObjectId  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageURL  String
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
}
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String?  @unique
  createdAt DateTime @default(now())
  trips    Trip[]
  posts    Post[]   
  reviews  Review[]
}

model Destination {
  id       String   @id @map("_id")
  name     String
  country  String
  trips    Trip[]
}

model Trip {
  id            String   @id @map("_id")
  title         String
  startDate     DateTime
  endDate       DateTime
  userId        String @db.ObjectId
  destinationId String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  bookings      Booking[]  // Харгалзах талбар
  reviews       Review[]   // Харгалзах талбар
}

model Booking {
  id       String   @id @map("_id")
  tripId   String
  hotel    String
  price    Float
  trip     Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Review {
  id       String   @id @map("_id")
  userId   String @db.ObjectId
  tripId   String
  rating   Int
  comment  String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trip     Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model TravelCompany {
  id       String   @id @map("_id")
  name     String
  country  String
  website  String
  posts    Post[]
  logoUrl  String?
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product[]       
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  color       String   @default("#FFFFFF")
  stock       Int      @default(0)
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[]
}

